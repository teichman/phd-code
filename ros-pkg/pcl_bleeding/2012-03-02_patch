Index: common/include/pcl/point_cloud.h
===================================================================
--- common/include/pcl/point_cloud.h	(revision 4900)
+++ common/include/pcl/point_cloud.h	(working copy)
@@ -637,7 +637,7 @@
         width (pc.width), height (pc.height), is_dense (pc.is_dense)
       {
         // Copy the obvious
-        properties.acquisition_time   = pc.header.stamp;
+        properties.acquisition_time   = pc.header.stamp.toSec();
         properties.sensor_origin      = pc.sensor_origin_;//.head<3> ();
         properties.sensor_orientation = pc.sensor_orientation_;
 
@@ -670,7 +670,7 @@
         width (pc.width), height (pc.height), is_dense (pc.is_dense)
       {
         // Copy the obvious
-        properties.acquisition_time   = pc.header.stamp;
+        properties.acquisition_time   = pc.header.stamp.toSec();
         properties.sensor_origin      = pc.sensor_origin_;//.head<3> ();
         properties.sensor_orientation = pc.sensor_orientation_;
 
Index: io/src/oni_grabber.cpp
===================================================================
--- io/src/oni_grabber.cpp	(revision 4900)
+++ io/src/oni_grabber.cpp	(working copy)
@@ -270,7 +270,7 @@
 {
   pcl::PointCloud<pcl::PointXYZ>::Ptr cloud(new pcl::PointCloud <pcl::PointXYZ>);
 
-  // TODO cloud->header.stamp = time;
+  cloud->header.stamp.fromSec(depth_image->getTimeStamp() * 1e-6);
   cloud->height = depth_height_;
   cloud->width = depth_width_;
   cloud->is_dense = false;
Index: io/src/openni_grabber.cpp
===================================================================
--- io/src/openni_grabber.cpp	(revision 4900)
+++ io/src/openni_grabber.cpp	(working copy)
@@ -494,7 +494,7 @@
   // check if we have color point cloud slots
   if (point_cloud_rgb_signal_->num_slots () > 0)
   {
-    PCL_WARN ("PointXYZRGB callbacks deprecated. Use PointXYZRGBA instead.\n");
+    //PCL_WARN ("PointXYZRGB callbacks deprecated. Use PointXYZRGBA instead.\n");
     point_cloud_rgb_signal_->operator()(convertToXYZRGBPointCloud<pcl::PointXYZRGB> (image, depth_image));
   }
 
@@ -608,6 +608,7 @@
   boost::shared_ptr<pcl::PointCloud<PointT> > cloud (new pcl::PointCloud<PointT>);
 
   cloud->header.frame_id = rgb_frame_id_;
+  cloud->header.stamp.fromSec(1e-6 * depth_image->getTimeStamp());
   cloud->height = std::max (image_height_, depth_height_);
   cloud->width = std::max (image_width_, depth_width_);
   cloud->is_dense = false;
