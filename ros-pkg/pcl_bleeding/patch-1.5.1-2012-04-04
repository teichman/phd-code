Index: common/include/pcl/point_cloud.h
===================================================================
--- common/include/pcl/point_cloud.h	(revision 3516)
+++ common/include/pcl/point_cloud.h	(working copy)
@@ -49,6 +49,21 @@
 #include <pcl/console/print.h>
 #include <boost/shared_ptr.hpp>
 
+namespace ros
+{
+
+  template<class T, class D>
+  bool TimeBase<T, D>::operator>(const T &rhs) const
+  {
+    if (sec > rhs.sec)
+      return true;
+    else if (sec == rhs.sec && nsec > rhs.nsec)
+      return true;
+    return false;
+  }
+
+}
+
 namespace pcl
 {
   namespace detail
Index: io/include/pcl/io/openni_camera/openni_depth_image.h
===================================================================
--- io/include/pcl/io/openni_camera/openni_depth_image.h	(revision 3516)
+++ io/include/pcl/io/openni_camera/openni_depth_image.h	(working copy)
@@ -70,7 +70,7 @@
      * @param[in] no_sample_value defines which values in the depth data are indicating that no depth (disparity) could be determined .
      * @attention The focal length may change, depending whether the depth stream is registered/mapped to the RGB stream or not.
      */
-    inline DepthImage (boost::shared_ptr<xn::DepthMetaData> depth_meta_data, float baseline, float focal_length, XnUInt64 shadow_value, XnUInt64 no_sample_value) throw ();
+    inline DepthImage (boost::shared_ptr<xn::DepthMetaData> depth_meta_data, float baseline, float focal_length, XnUInt64 shadow_value, XnUInt64 no_sample_value, double system_timestamp) throw ();
 
     /**
      * @author Suat Gedikli
@@ -172,20 +172,24 @@
      *            But definitely synchronized with other streams
      */
     inline unsigned long getTimeStamp () const throw ();
+    inline double getSystemTimeStamp () const { return system_timestamp_; }
   protected:
     boost::shared_ptr<xn::DepthMetaData> depth_md_;
     float baseline_;
     float focal_length_;
     XnUInt64 shadow_value_;
     XnUInt64 no_sample_value_;
+    double system_timestamp_;
   } ;
 
-  DepthImage::DepthImage (boost::shared_ptr<xn::DepthMetaData> depth_meta_data, float baseline, float focal_length, XnUInt64 shadow_value, XnUInt64 no_sample_value) throw ()
+  DepthImage::DepthImage (boost::shared_ptr<xn::DepthMetaData> depth_meta_data, float baseline, float focal_length, XnUInt64 shadow_value, XnUInt64 no_sample_value, double system_timestamp = -1) throw ()
   : depth_md_ (depth_meta_data)
   , baseline_ (baseline)
   , focal_length_ (focal_length)
   , shadow_value_ (shadow_value)
-  , no_sample_value_ (no_sample_value) { }
+  , no_sample_value_ (no_sample_value)
+  , system_timestamp_(system_timestamp)
+  { }
 
   DepthImage::~DepthImage () throw () { }
 
Index: io/src/openni_camera/openni_device.cpp
===================================================================
--- io/src/openni_camera/openni_device.cpp	(revision 3516)
+++ io/src/openni_camera/openni_device.cpp	(working copy)
@@ -595,7 +595,7 @@
 
     image_lock.unlock ();
 
-    boost::shared_ptr<Image> image = getCurrentImage (image_data);
+    boost::shared_ptr<Image> image = getCurrentImage(image_data);
     for (map< OpenNIDevice::CallbackHandle, ActualImageCallbackFunction >::iterator callbackIt = image_callback_.begin (); callbackIt != image_callback_.end (); ++callbackIt)
     {
       callbackIt->second.operator()(image);
@@ -616,12 +616,17 @@
       return;
 
     depth_generator_.WaitAndUpdateData ();
+    timespec clk;
+    clock_gettime(CLOCK_REALTIME, &clk); // System time before PCL processing happens.
+    double system_timestamp = (double)clk.tv_sec + (double)clk.tv_nsec * (double)1e-9;
+    
     boost::shared_ptr<xn::DepthMetaData> depth_data (new xn::DepthMetaData);
     depth_generator_.GetMetaData (*depth_data);
     depth_lock.unlock ();
 
-    boost::shared_ptr<DepthImage> depth_image ( new DepthImage (depth_data, baseline_, getDepthFocalLength (), shadow_value_, no_sample_value_) );
-
+    boost::shared_ptr<DepthImage> depth_image ( new DepthImage (depth_data, baseline_, getDepthFocalLength (),
+								shadow_value_, no_sample_value_, system_timestamp) );
+      
     for (map< OpenNIDevice::CallbackHandle, ActualDepthImageCallbackFunction >::iterator callbackIt = depth_callback_.begin ();
          callbackIt != depth_callback_.end (); ++callbackIt)
     {
Index: io/src/openni_grabber.cpp
===================================================================
--- io/src/openni_grabber.cpp	(revision 3516)
+++ io/src/openni_grabber.cpp	(working copy)
@@ -48,6 +48,45 @@
 #include <boost/filesystem.hpp>
 #include <iostream>
 
+namespace ros
+{
+
+  void normalizeSecNSec(uint32_t& sec, uint32_t& nsec)
+  {
+    uint64_t sec64 = sec;
+    uint64_t nsec64 = nsec;
+
+    normalizeSecNSec(sec64, nsec64);
+
+    sec = (uint32_t)sec64;
+    nsec = (uint32_t)nsec64;
+  }
+
+  void normalizeSecNSec(uint64_t& sec, uint64_t& nsec)
+  {
+    uint64_t nsec_part = nsec % 1000000000UL;
+    uint64_t sec_part = nsec / 1000000000UL;
+
+    if (sec_part > UINT_MAX)
+      throw std::runtime_error("Time is out of dual 32-bit range");
+
+    sec += sec_part;
+    nsec = nsec_part;
+  }
+  
+  template<class T, class D>
+  T& TimeBase<T, D>::fromNSec(uint64_t t)
+  {
+    sec  = (int32_t)(t / 1000000000);
+    nsec = (int32_t)(t % 1000000000);
+
+    normalizeSecNSec(sec, nsec);
+
+    return *static_cast<T*>(this);
+  }
+
+}
+
 namespace pcl
 {
   typedef union
@@ -591,9 +630,8 @@
 
   boost::shared_ptr<pcl::PointCloud<pcl::PointXYZRGB> > cloud (new pcl::PointCloud<pcl::PointXYZRGB>);
 
-#ifndef USE_ROS
-  cloud->header.stamp = depth_image->getTimeStamp ();
-#endif
+  cloud->header.stamp.fromNSec(1000 * depth_image->getTimeStamp ());
+  //cloud->header.stamp.fromSec(depth_image->getSystemTimeStamp ());
   cloud->header.frame_id = rgb_frame_id_;
   cloud->height = depth_height_;
   cloud->width = depth_width_;
